<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Outpost31</name>
    </assembly>
    <members>
        <member name="T:Outpost31.Core.NtstWebService.NtstWebServiceSecurity">
            <summary>TBD</summary>
        </member>
        <member name="P:Outpost31.Core.NtstWebService.NtstWebServiceSecurity.WebServiceUser">
            <summary>TBD</summary>
        </member>
        <member name="P:Outpost31.Core.NtstWebService.NtstWebServiceSecurity.WebServicePassword">
            <summary>TBD</summary>
        </member>
        <member name="M:Outpost31.Core.NtstWebService.NtstWebServiceSecurity.BuildDefaultSecurityObject">
            <summary>TBD</summary>
        </member>
        <member name="M:Outpost31.Core.NtstWebService.NtstWebServiceSecurity.Load(System.String,System.String)">
            <summary>TBD</summary>
        </member>
        <member name="T:Outpost31.Core.TingenApp">
            <summary>High level logic for the Tingen application.</summary>
            <!-- Failed to insert some or all of included XML --><include file="XmlDoc/Outpost31.Core_doc.xml" path="Outpost31/Cs[@name=&quot;TingenApp&quot;]/TingenApp/*" />
        </member>
        <member name="P:Outpost31.Core.TingenApp.ExeAsm">
            <summary>The executing Assembly name.</summary>
            <remarks>A required component for writing log files, defined here so it can be used throughout the class.</remarks>
        </member>
        <member name="M:Outpost31.Core.TingenApp.StartApp(Outpost31.Core.Session.TingenSession)">
            <summary>Starts the Tingen web service.</summary>
            <param name="tnSession">The TingenSession object for this session.</param>
            <!-- Failed to insert some or all of included XML --><include file="XmlDoc/Outpost31.Core_doc.xml" path="Outpost31/Cs[@name=&quot;TingenApp&quot;]/StartApp/*" />
        </member>
        <member name="M:Outpost31.Core.TingenApp.StopApp(Outpost31.Core.Session.TingenSession)">
            <summary>Stops the Tingen web service.</summary>
            <param name="tnSession">The TingenSession object for this session.</param>
        </member>
        <member name="T:Outpost31.Core.Avatar.AvatarData">
            <summary>The Tingen session component that contains Avatar-related data.</summary>
            <remarks>
                <para>
                    The <c>AvatarData</c> class is the foundation of a data structure that contains the following::
                    <list type="bullet">
                        <item><see cref="P:Outpost31.Core.Avatar.AvatarData.SystemCode" /></item>
                        <item><see cref="P:Outpost31.Core.Avatar.AvatarData.ReturnOptionObject" /></item>
                        <item><see cref="P:Outpost31.Core.Avatar.AvatarData.SentOptionObject" /></item>
                        <item><see cref="P:Outpost31.Core.Avatar.AvatarData.SentScriptParameter" /></item>
                        <item><see cref="P:Outpost31.Core.Avatar.AvatarData.WorkOptionObject" /></item>
                    </list>
                </para>
                <para>
                    The <c>AvatarData</c> data structure is added to the <see cref="T:Outpost31.Core.Session.TingenSession" /> at runtime.
                </para>
            </remarks><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation">Tingen documentation</seealso>
        </member>
        <member name="P:Outpost31.Core.Avatar.AvatarData.SystemCode">
            <summary>The Avatar System Code that Tingen will interface with.</summary>
            <remarks>
                <para>
                    Tingen works with a single Avatar environment at a time, defined by one of the following Avatar <c>System Codes</c>:
                    <list type="table">
                        <listheader>
                            <term>System Code</term>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>LIVE</term>
                            <description>The Production environment</description>
                        </item>
                        <item>
                            <term>UAT</term>
                            <description>The User Acceptance Testing environment</description>
                        </item>
                    </list>
                </para>
                <para>
                    Your organization may have additional Avatar environments, but Tingen is only designed/tested to work with the above System Codes.
                </para>
            </remarks><value>
                This should be <c>LIVE</c> for production environments, and <c>UAT</c> for testing environments.
            </value>
        </member>
        <member name="P:Outpost31.Core.Avatar.AvatarData.SentOptionObject">
            <summary>The original data structure sent from Avatar.</summary>
            <remarks>
                <para>
                    The <c>SentOptionObject</c> is the original data structure that is sent from  Avatar to Tingen, and contains all of the <i>data</i> Tingen needs to do its work.<br />
                    <br />
                    It is important to note that the <c>SentOptionObject</c> is <i>never directly modified</i> by Tingen, since all modifications are made using the <see cref="P:Outpost31.Core.Avatar.AvatarData.WorkOptionObject" />.
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Avatar.AvatarData.SentScriptParameter">
            <summary>The original Script Parameter sent from Avatar.</summary>
            <remarks>
                <para>
                    The <c>SentOptionObject</c> is the original data structure that is sent from  Avatar to Tingen, and contains all of the <i>data</i> Tingen needs to do its work.<br />
                    <br />
                    It is important to note that the <c>SentOptionObject</c> is <i>never directly modified</i> by Tingen, since all modifications are made using the <see cref="P:Outpost31.Core.Avatar.AvatarData.WorkOptionObject" />.
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Avatar.AvatarData.WorkOptionObject">
            <summary>The data structure that (is potentially) modified during a Tingen Session.</summary>
            <remarks>
                <para>
                    Any modifications made to the original data sent from Avatar are made in the <c>WorkOptionObject</c> data structure.<br />
                    <br />
                    The <c>WorkOptionObject</c> is not formatted correctly, nor does it contain the required information, to be returned to Avatar (that's the job of the <see cref="P:Outpost31.Core.Avatar.AvatarData.ReturnOptionObject" />).
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Avatar.AvatarData.ReturnOptionObject">
            <summary>The data structure that is returned to Avatar.</summary>
            <remarks>
                <para>
                    The <c>ReturnOptionObject</c> is the data structure that is returned to Avatar, and contains any modifications made to the original data.<br />
                    <br />
                    Prior to returning the <c>ReturnOptionObject</c> to Avatar, it must be <i>finalized</i> via <see cref="M:Outpost31.Core.Avatar.ReturnObject.Finalize(Outpost31.Core.Session.TingenSession,System.String,System.String)" />.<br />
                    <br />
                    The finalization process verifies that the <c>ReturnOptionObject</c> is formatted correctly, and that all of the required information Avatar needs to accept the returned data is is present.
                </para>
            </remarks>
        </member>
        <member name="M:Outpost31.Core.Avatar.AvatarData.BuildObject(ScriptLinkStandard.Objects.OptionObject2015,System.String)">
            <summary>Builds a new AvatarData data structure.</summary>
            <param name="sentOptionObject">The SentOptionObject data structure sent from Avatar.</param>
            <param name="sentScriptParameter">The SentScriptParameter sent from Avatar.</param>
            <returns>All of the data/information Tingen needs in order to do work.</returns>
            <remarks>
                <para>
                    A few things about this method:
                    <list type="bullet">
                        <item> The <see cref="P:Outpost31.Core.Avatar.AvatarData.SystemCode" /> is defined at runtime in <c>Tingen.Runscript()</c>.</item>
                        <item>The <see cref="P:Outpost31.Core.Avatar.AvatarData.SentScriptParameter" /> is converted to lowercase so it is easier to compare against.</item>
                        <item>All work is done in the <see cref="P:Outpost31.Core.Avatar.AvatarData.WorkOptionObject" />, which is cloned from the <see cref="P:Outpost31.Core.Avatar.AvatarData.SentOptionObject" />, ensuring that the original data sent from Avatar remains unmodified.</item>
                        <item>The <see cref="P:Outpost31.Core.Avatar.AvatarData.ReturnOptionObject" /> is initally set to <c>null</c>, and will be finalized prior to returning to Avatar.</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="T:Outpost31.Core.Avatar.ReturnObject">
            <summary>Logic for the ReturnOptionObject data structure.</summary>
            <remarks>
                <para>
                    This class does various things with the <see cref="P:Outpost31.Core.Avatar.AvatarData.ReturnOptionObject" /> data structure, including:
                    <list type="bullet">
                        <item>Finalizes the <c>ReturnOptionObject</c>, so it can be returned to Avatar</item>
                    </list>
                </para>
            </remarks><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation">Tingen documentation</seealso>
        </member>
        <member name="P:Outpost31.Core.Avatar.ReturnObject.ExeAsm">
            <summary>The executing assembly name.</summary>
            <remarks>This is defined here so it can be used to write log files throughout the class.</remarks>
        </member>
        <member name="M:Outpost31.Core.Avatar.ReturnObject.Finalize(Outpost31.Core.Session.TingenSession,System.String,System.String)">
            <summary>Finalize an OptionObject so it can be returned to Avatar.</summary>
            <param name="tnSession">The Tingen Session data structure object.</param>
            <param name="errorString">The OptionObject error string.</param>
            <param name="errorMessage">The OptionObject error message .</param>
            <remarks>
                <para>
                    Before returning an OptionObject data structure to Avatar, it must be formatted properly, and contain all required information. The <c>Finalize</c> process takes care of those things by:
                    <list type="number">
                        <item>Cloning the <see cref="P:Outpost31.Core.Avatar.AvatarData.ReturnOptionObject" /> the <see cref="P:Outpost31.Core.Avatar.AvatarData.WorkOptionObject" /></item>
                        <item>Assigning a valid <i>error code</i> to the returnOptionObject</item>
                        <item>Assigning an <i>error message</i> to the returnOptionObject</item>
                        <item>Verifying the returnOptionObject contains all required data</item>
                    </list>
                    The OptionObject expects an error code of type <c>int</c>, but to make it more readable, Tingen works with the following "error strings" (which will then be converted to an <c>int</c>):
                    <list type="table">
                        <listheader>
                            <term>Error string</term>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>"clone",<br />"none",<br /> "success" </term>
                            <description>Returns the OptionObject without a message (error code <c>0</c>)</description>
                        </item>
                        <item>
                            <term>"error"</term>
                            <description> Stops the script from processing and displays an message with an "OK" button (error code <c>1</c>)</description>
                        </item>
                        <item>
                            <term>"okcancel"</term>
                            <description>Displays a message with "OK" and "Cancel" buttons (error code <c>2</c>)</description>
                        </item>
                        <item>
                            <term>"info"</term>
                            <description>Displays an informational warning message with an "OK" button (error code <c>3</c>) </description>
                        </item>
                        <item>
                            <term>"yesno"</term>
                            <description>Displays a message with "Yes" and "No" buttons (error code <c>4</c>)</description>
                        </item>
                        <item>
                            <term>"openurl"</term>
                            <description>Opens an URL in a browser (error code <c>5</c>)</description>
                        </item>
                        <item>
                            <term>"openform"</term>
                            <description>Presents an OK/Cancel dialog to open a form (error code <c>6</c>)<br /></description>
                        </item>
                    </list>
                    <b>NOTE:</b> The <c>openform</c> error string can only be used on Form Load and Field events.
                </para>
            </remarks><example>
                To stop a script from processing and display an error message with an "OK" button:
                <code>
                    Outpost31.Core.Avatar.ReturnObject.Finalize(tnSession, "error", "There was an error!");
                </code>
                To pause a script and ask if the user wants to continue:
                <code>
                    Outpost31.Core.Avatar.ReturnObject.Finalize(tnSession, "yesno", "You might want to check your data. Do you want to continue?");
                </code>
                To display an informational message:
                <code>
                    Outpost31.Core.Avatar.ReturnObject.Finalize(tnSession, "info", "Have a nice day!");
                </code>
            </example>
        </member>
        <member name="T:Outpost31.Core.Framework.Catalog.SystemCodePaths">
            <summary>System Code paths for Tingen.</summary>
            <remarks>
                <para>
                    Builds/verifies Tingen public paths.<br />
                    <br />
                    System Code paths are paths that are used by Tingen, and are generally not available to users.
                </para>
            </remarks><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation">Tingen documentation</seealso>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.SystemCodePaths.Root">
            <summary>Root path for System Code data.</summary>
            <remarks>
                <para>
                    The root folder for Avatar System Codes data.
                </para>
                <para>
                    Examples of Avatar System Codes data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.SystemCodePaths.Config">
            <summary>Path for System Code configuration data.</summary>
            <!-- No matching elements were found for the following include tag --><include file="XmlDoc/Outpost31-Common_doc.xml" path="Outpost31-Common/Type[@name=&quot;DataPath&quot;]/Config/*" />
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.SystemCodePaths.Sessions">
            <summary>Path for System Code session data.</summary>
            <remarks>
                <para>
                    Session data
                </para>
                <para>
                    Examples of reports include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.SystemCodePaths.CurrentSession">
            <summary>Current session path.</summary>
            <remarks>This is set at runtime.</remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.SystemCodePaths.Extensions">
            <summary>Path for Tingen Extensions.</summary>
            <remarks>
                <para>
                    This functionality is not implemented (yet).
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.SystemCodePaths.Security">
            <summary>Path for Tingen security-related data.</summary>
            <remarks>
                <para>
                    This functionality is not implemented (yet).
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.SystemCodePaths.Temporary">
            <summary>Path for temporary data.</summary>
            <remarks>
                <para>
                    Temporary data.
                </para>
                <para>
                    Examples of temporary data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.SystemCodePaths.MessageRoot">
            <summary>Root for message data.</summary>
            <remarks>Should be "<c>%tnDataRoot%\%SystemCode%\Messages\</c>"</remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.SystemCodePaths.Alerts">
            <summary>Path for alert data.</summary>
            <remarks>
                <para>
                    Alert messages are used to notify the user of important information.
                </para>
                <para>
                    Examples of alerts include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.SystemCodePaths.Errors">
            <summary>Path for error data.</summary>
            <remarks>
                <para>
                    Error messages are used to notify the user of a problem that has occurred.
                </para>
                <para>
                    Examples of errors include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.SystemCodePaths.Warnings">
            <summary>Path for warning data.</summary>
            <remarks>
                <para>
                    Warning messages are used to notify the user of a potential problem.
                </para>
                <para>
                    Examples of warnings include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.SystemCodePaths.ExportRoot">
            <summary>Root for exported data.</summary>
            <remarks>Should be "<c>%tnDataRoot%\%SystemCode%\Exports\</c>"</remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.SystemCodePaths.Reports">
            <summary>Path for exported reports.</summary>
            <remarks>Should be "<c>%tnDataRoot%\%SystemCode%\Exports\Reports\</c>"</remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.SystemCodePaths.ImportRoot">
            <summary>Root for imported data.</summary>
            <remarks>Should be "<c>%tnDataRoot%\%SystemCode%\Imports\</c>"</remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.SystemCodePaths.FromAvatar">
            <summary>Path for imported data from Avatar.</summary>
            <remarks>
                <para>
                    Data exported from Avatar.
                </para>
                <para>
                    Examples of data exported from Avatar include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.SystemCodePaths.Templates">
            <summary>Path for imported templates.</summary>
            <remarks>
                <para>
                    Templates
                </para>
                <para>
                    Examples of templates include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.SystemCodePaths.SupportRoot">
            <summary>Root for support data.</summary>
            <remarks>Should be "<c>%tnDataRoot%\%SystemCode%\Support\</c>"</remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.SystemCodePaths.Admin">
            <summary>Path for admin data.</summary>
            <remarks>
                <para>
                    Admin data.
                </para>
                <para>
                    Examples of admin data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.SystemCodePaths.Archive">
            <summary>Path for archived data.</summary>
            <remarks>
                <para>
                    Archived data
                </para>
                <para>
                    Examples of archived data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.SystemCodePaths.Debugging">
            <summary>Path for debugging data.</summary>
            <remarks>
                <para>
                    Debugging data.
                </para>
                <para>
                    Examples of Debugging data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.SystemCodePaths.Logs">
            <summary>Path for log data.</summary>
            <remarks>
                <para>
                    Logging data.
                </para>
                <para>
                    Examples of logging data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="M:Outpost31.Core.Framework.Catalog.SystemCodePaths.BuildObject(System.String,System.String)">
            <summary>Builds the system code paths object.</summary>
            <param name="tnDataRoot">The Tingen data root.</param>
            <param name="avSystemCode">The Avatar System Code.</param>
            <returns>The System Code data paths.</returns>
        </member>
        <member name="M:Outpost31.Core.Framework.Catalog.SystemCodePaths.RequiredPaths(Outpost31.Core.Framework.Catalog.SystemCodePaths)">
            <summary>Returns a list of required System Code paths.</summary>
            <param name="systemCodePaths">The System Code paths.</param>
            <returns>The list of required System Code paths.</returns>
        </member>
        <member name="T:Outpost31.Core.Framework.Catalog.PublicPaths">
            <summary>Public paths for Tingen.</summary>
            <remarks>
                <para>
                    Builds/verifies Tingen public paths.<br />
                    <br />
                    Public paths are paths that are accessible to the public, and are available in the <c>Public/</c> folder.
                </para>
            </remarks><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation">Tingen documentation</seealso>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.PublicPaths.Root">
            <summary>The root path for public data.</summary>
            <remarks>
                <para>
                    The root folder for public data.
                </para>
                <para>
                    Examples of public data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.PublicPaths.Alerts">
            <summary>The public path for alerts.</summary>
            <remarks>
                <para>
                    Alert messages are used to notify the user of important information.
                </para>
                <para>
                    Examples of alerts include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.PublicPaths.Errors">
            <summary>Path for public error messages.</summary>
            <remarks>
                <para>
                    Error messages are used to notify the user of a problem that has occurred.
                </para>
                <para>
                    Examples of errors include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.PublicPaths.Exports">
            <summary>Path for public exported data.</summary>
            <remarks>
                <para>
                    Exported data.
                </para>
                <para>
                    Examples of exported data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.PublicPaths.Reports">
            <summary>Path for public reports.</summary>
            <remarks>
                <para>
                    Reports are used to display data in a structured format.
                </para>
                <para>
                    Examples of reports include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.PublicPaths.Warnings">
            <summary>Path for public warning messages.</summary>
            <remarks>
                <para>
                    Warning messages are used to notify the user of a potential problem.
                </para>
                <para>
                    Examples of warnings include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="M:Outpost31.Core.Framework.Catalog.PublicPaths.BuildObject(System.String)">
            <summary>Builds the public paths data structure.</summary>
            <param name="tnDataRoot">The Tingen data root.</param>
            <returns>The Tingen public paths data structure.</returns>
        </member>
        <member name="M:Outpost31.Core.Framework.Catalog.PublicPaths.RequiredPaths(Outpost31.Core.Framework.Catalog.PublicPaths)">
            <summary>Returns a list of required public paths.</summary>
            <param name="publicPaths">The Tingen public paths.</param>
            <returns>The list of required public paths.</returns>
        </member>
        <member name="T:Outpost31.Core.Framework.Catalog.RemotePaths">
            <summary>Remote paths for Tingen.</summary>
            <remarks>
                <para>
                    Builds/verifies Tingen remote paths.<br />
                    <br />
                    Remote paths are paths that are accessible to specific users.
                </para>
            </remarks><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation">Tingen documentation</seealso>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.RemotePaths.Root">
            <summary>Root path for remote data.</summary>
            <remarks>
                <para>
                    The root folder for remote data.
                </para>
                <para>
                    Examples of remote data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.RemotePaths.Alerts">
            <summary>Path for remote alert data.</summary>
            <remarks>
                <para>
                    Alert messages are used to notify the user of important information.
                </para>
                <para>
                    Examples of alerts include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.RemotePaths.Errors">
            <summary>Path for remote error data.</summary>
            <remarks>
                <para>
                    Error messages are used to notify the user of a problem that has occurred.
                </para>
                <para>
                    Examples of errors include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.RemotePaths.Exports">
            <summary>Path for remote export data.</summary>
            <remarks>
                <para>
                    Exported data.
                </para>
                <para>
                    Examples of exported data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.RemotePaths.Reports">
            <summary>Path for remote report data.</summary>
            <remarks>
                <para>
                    Reports are used to display data in a structured format.
                </para>
                <para>
                    Examples of reports include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.RemotePaths.Sessions">
            <summary>Path for remote session data.</summary>
            <remarks>
                <para>
                    Session data
                </para>
                <para>
                    Examples of reports include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.RemotePaths.CurrentSession">
            <summary>Current session path.</summary>
            <remarks>This is set at runtime.</remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.RemotePaths.Warnings">
            <summary>Path for remote warning files.</summary>
            <remarks>
                <para>
                    Warning messages are used to notify the user of a potential problem.
                </para>
                <para>
                    Examples of warnings include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="M:Outpost31.Core.Framework.Catalog.RemotePaths.BuildObject(System.String)">
            <summary>Builds the remote paths object.</summary>
            <param name="tnDataRoot">The Tingen data root.</param>
            <returns>The Tingen remote paths data structure.</returns>
        </member>
        <member name="M:Outpost31.Core.Framework.Catalog.RemotePaths.RequiredPaths(Outpost31.Core.Framework.Catalog.RemotePaths)">
            <summary>Returns a list of required paths.</summary>
            <param name="remotePaths">The Tingen remote paths.</param>
            <returns>The list of required remote paths.</returns>
        </member>
        <member name="T:Outpost31.Core.Framework.Catalog.TingenPaths">
            <summary>Specific to Tingen.</summary>
            <remarks>
                <para>
                    Builds/verifies Tingen remote paths.<br />
                    <br />
                    Tingen-specific are paths that are used by Tingen, and are generally not available to users.
                </para>
            </remarks><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation">Tingen documentation</seealso>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.TingenPaths.Root">
            <summary>Root path for Tingen data.</summary>
            <value>C:\TingenData</value>
        </member>
        <member name="P:Outpost31.Core.Framework.Catalog.TingenPaths.Primeval">
            <summary>Path for Tingen Primeval data.</summary>
            <remarks>
                <para>
                    Primeval logging data.
                </para>
                <para>
                    Examples of primeval logging data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
            <value>C:\TingenData\Primeval</value>
        </member>
        <member name="M:Outpost31.Core.Framework.Catalog.TingenPaths.BuildObject(System.String)">
            <summary>Builds the Tingen path object.</summary>
            <param name="tnDataRoot">The Tingen data root.</param>
            <returns>A collection of Tingen paths.</returns>
        </member>
        <member name="M:Outpost31.Core.Framework.Catalog.TingenPaths.RequiredPaths(Outpost31.Core.Framework.Catalog.TingenPaths)">
            <summary>Returns a list of required Tingen paths.</summary>
            <param name="tnPaths">The Tingen paths.</param>
            <returns>The list of required Tingen paths.</returns>
        </member>
        <member name="T:Outpost31.Core.Framework.Refresh">
            <summary>Refresh the Tingen directory structure.</summary>
            <remarks>
                <para>
                    Refreshes things.<br />
                </para>
            </remarks><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation">Tingen documentation</seealso>
        </member>
        <member name="M:Outpost31.Core.Framework.Refresh.RefreshOnDisable(Outpost31.Core.Session.TingenSession)">
            <summary>Refresh the Tingen directory structure when Tingen is disabled.</summary>
            <param name="tnSession">The Tingen Session object</param>
            <remarks>
                <para>
                    Refreshes data on disable.<br />
                </para>
            </remarks>
        </member>
        <member name="M:Outpost31.Core.Framework.Refresh.RefreshOnUnknown(Outpost31.Core.Session.TingenSession)">
            <summary>Refresh the Tingen directory structure when Tingen is in an unknown state.</summary>
            <param name="tnSession">The Tingen Session object</param>
            <remarks>
                <para>
                    Refreshes data when in an unknown state.<br />
                </para>
            </remarks>
        </member>
        <member name="T:Outpost31.Core.Framework.Maintenance">
            <summary>Methods for maintaining the Tingen framework.</summary>
            <remarks>
                <para>
                    Various methods for maintaining the Tingen framework.<br />
                </para>
            </remarks><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation">Tingen documentation</seealso>
        </member>
        <member name="P:Outpost31.Core.Framework.Maintenance.ExeAsm">
            <summary>The executing assembly name.</summary>
            <remarks>This is defined here so it can be used to write log files throughout the class.</remarks>
        </member>
        <member name="M:Outpost31.Core.Framework.Maintenance.VerifyFramework(Outpost31.Core.Session.TingenSession)">
            <summary>Verify the Tingen framework.</summary>
            <param name="tnSession">The Tingen Session object.</param>
            <remarks>
                <para>
                    Documentation needed.<br />
                </para>
            </remarks>
        </member>
        <member name="M:Outpost31.Core.Framework.Maintenance.RefreshDirectory(System.String)">
            <summary>Delete a directory, then recreate it.</summary>
            <param name="directoryPath">The path to the directory to refresh.</param>
            <remarks>
                <para>
                    Add documentation explaining why log files are limited when refreshing directories.<br />
                </para>
            </remarks>
        </member>
        <member name="M:Outpost31.Core.Framework.Maintenance.VerifyDirectory(System.String)">
            <summary>Verify a directory exists, and create it if it does not.</summary>
            <param name="directoryPath">The path to the directory to verify.</param>
            <remarks>
                <para>
                    Add documentation explaining why log files are limited when verifying a directory.<br />
                </para>
            </remarks>
        </member>
        <member name="M:Outpost31.Core.Framework.Maintenance.VerifyDirectories(System.Collections.Generic.List{System.String})">
            <summary>Verify a list of directories exist, and create them if they do not.</summary>
            <param name="directoryPaths">The list of directories to verify.</param>
            <remarks>
                <para>
                    Add documentation explaining why log files are limited when verifying directories.<br />
                </para>
            </remarks>
        </member>
        <member name="T:Outpost31.Core.Framework.Paths">
            <summary>The Tingen Framework paths.</summary>
            <remarks>
                <para>
                    Does things with paths and stuff.<br />
                </para>
            </remarks><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation">Tingen documentation</seealso>
        </member>
        <member name="P:Outpost31.Core.Framework.Paths.Tingen">
            <summary>Tingen data paths.</summary>
            <remarks>
                <para>
                    The root folder for Tingen-specific data.
                </para>
                <para>
                    Examples of Tingen-specific data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Paths.SystemCode">
            <summary>System code data paths.</summary>
            <remarks>
                <para>
                    The root folder for Avatar System Codes data.
                </para>
                <para>
                    Examples of Avatar System Codes data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Paths.Public">
            <summary>Public data paths.</summary>
            <remarks>
                <para>
                    The root folder for public data.
                </para>
                <para>
                    Examples of public data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Paths.Remote">
            <summary>Remote data paths.</summary>
            <remarks>
                <para>
                    The root folder for remote data.
                </para>
                <para>
                    Examples of remote data include:
                    <list type="bullet">
                        <item>Example #1</item>
                        <item>Example #2</item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="M:Outpost31.Core.Framework.Paths.Build(System.String,System.String)">
            <summary>Builds the paths object.</summary>
            <param name="tnDataRoot">The Tingen data root.</param>
            <param name="avSystemCode">The Avatar System Code.</param>
            <remarks>Builds the paths object.</remarks>
            <returns>The Tingen data paths.</returns>
        </member>
        <member name="T:Outpost31.Core.Logger.LoggerCatalog">
            <summary>Log catalog for the Outpost31.Core.Logger namespace.</summary>
            <remarks>
                <para>
                    Logs event catalogs.<br />
                </para>
            </remarks><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation">Tingen documentation</seealso>
        </member>
        <member name="M:Outpost31.Core.Logger.LoggerCatalog.StandardContent(System.String,System.String,System.String,System.String,System.String)">
            <summary>Basic log information</summary>
            <param name="assemblyName">The executing assembly name.</param>
            <param name="callPath">The path of the calling class.</param>
            <param name="callMember">The path of the calling method</param>
            <param name="callLine">The line of code</param>
            <param name="message">The log message</param>
            <remarks>Creates standard log content string.</remarks>
            <returns>The basic log content.</returns>
        </member>
        <member name="T:Outpost31.Core.Logger.TraceLog">
            <summary>Trace logs.</summary>
            <remarks>
                <para>
                    What a Trace log is.<br />
                </para>
            </remarks><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation">Tingen documentation</seealso>
        </member>
        <member name="P:Outpost31.Core.Logger.TraceLog.TraceLogPath">
            <summary>Path to the TraceLog</summary>
            <remarks>
                <para>
                    Why.<br />
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Logger.TraceLog.TraceLogLevel">
            <summary>TraceLogLevel</summary>
            <remarks>
                <para>
                    Determines the amount of <b>Trace Logs</b> that are generated.
                </para>
                <para>
                    The Trace Level can be be between <c>0</c> (disabled) and <c>9</c> (all Trace Logs are written).
                </para>
                <para>
                    Trace log levels are cumulative, meaning that a level <c>3</c> trace log will also write level <c>2</c> and level <c>1</c> trace logs.
                </para>
            </remarks><value>
                If you aren't having any issues, you can set this to <c>0</c>, but keep in mind that the higher the number, the greater affect creating Trace Logs will have on performance.
            </value><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation/blob/main/Static/Logging.md">Tingen Documentation: Logging</seealso>
        </member>
        <member name="P:Outpost31.Core.Logger.TraceLog.TraceLogDelay">
            <summary>TraceLogDelay</summary>
            <remarks>
                <para>
                    Determines the delay, in milliseconds, between <b>Trace Log</b> writes.
                </para>
                <para>
                    Since Trace Logs may be written <i>extremely fast</i>, the <c>TraceDelay</c> setting can beused to slow down the log writing process, ensuring all logs are written.
                </para>
            </remarks><value>
                The default is <c>10</c>. Increasing this value is not recommended, since it can have an adverse affect on performance.
            </value><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation/blob/main/Static/Logging.md">Tingen Documentation: Logging</seealso>
        </member>
        <member name="M:Outpost31.Core.Logger.TraceLog.BuildInfo(System.String,System.Int32,System.Int32)">
            <summary>Build the trace log information.</summary>
            <param name="traceLogLevel">TraceLog level</param>
            <param name="traceLogDelay">TraceLog delay</param>
            <param name="traceLogPath">TraceLog path</param>
            <remarks>Builds the Trace Log information.</remarks>
            <returns>TraceLog information.</returns>
        </member>
        <member name="M:Outpost31.Core.Logger.TraceLog.Create(System.Int32,System.String,Outpost31.Core.Logger.TraceLog,System.String,System.String,System.Int32)">
            <summary>Create a TraceLog</summary>
            <param name="traceLevel">TraceLog level</param>
            <param name="traceInfo">Tracelog information</param>
            <param name="assemblyName">Executing assembly</param>
            <param name="callPath">Called class</param>
            <param name="callMember">Called method</param>
            <param name="callLine">Called line</param>
            <remarks>
                <para>
                    What this creates.<br />
                </para>
            </remarks>
        </member>
        <member name="M:Outpost31.Core.Logger.TraceLog.Create(System.Int32,System.String,Outpost31.Core.Logger.TraceLog,System.String,System.String,System.Int32,System.String)">
            <summary>Soon.</summary>
            <param name="logLevel">TraceLog level</param>
            <param name="assemblyName">Executing assembly</param>
            <param name="traceInfo">Tracelog information</param>
            <param name="fromClass">Called class</param>
            <param name="fromMethod">Called method</param>
            <param name="line">Called line</param>
            <param name="message">Log message</param>
            <!-- No matching elements were found for the following include tag --><include file="XmlDoc/Outpost31.Core.Logger.TraceLog_doc.xml" path="Outpost31.Core.Logger.TraceLog/Type[@name=&quot;Method&quot;]/Create_WithMessage/*" />
        </member>
        <member name="T:Outpost31.Core.Logger.PrimevalLog">
            <summary>Primeval logs</summary>
            <remarks>
                <para>
                   What a Primeval log is.<br />
                </para>
            </remarks><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation">Tingen documentation</seealso>
        </member>
        <member name="P:Outpost31.Core.Logger.PrimevalLog.PrimevalLogPath">
            <summary>Primeval log path.</summary>
            <remarks>Why this is important, and why it is what it is.</remarks>
        </member>
        <member name="M:Outpost31.Core.Logger.PrimevalLog.Create(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>Creates a Primeval log.</summary>
            <param name="assemblyName">The executing assembly name.</param>
            <param name="message">The log message</param>
            <param name="fromClass">The path of the calling class.</param>
            <param name="fromMethod">The path of the calling method</param>
            <param name="line">The line of code</param>
            <remarks>
                <para>
                    What this does.<br />
                </para>
            </remarks>
        </member>
        <member name="M:Outpost31.Core.Logger.PrimevalLog.DevelopmentCleanup">
            <summary>Removes old Primeval logs.</summary>
            <remarks>Not currently used.</remarks>
        </member>
        <member name="T:Outpost31.Core.Logger.LogEvent">
            <summary>Provides logging functionality.</summary>
            <remarks>
                <para>
                    Logs events.<br />
                </para>
            </remarks><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation">Tingen documentation</seealso>
        </member>
        <member name="M:Outpost31.Core.Logger.LogEvent.Trace(System.Int32,System.String,Outpost31.Core.Logger.TraceLog,System.String,System.String,System.String,System.Int32)">
            <summary>Log a trace event.</summary>
            <remarks>
                <para>
                    Information on Trace Logs (what they are, where/why they are used, etc.)<br />
                </para>
            </remarks>
        </member>
        <member name="M:Outpost31.Core.Logger.LogEvent.Primeval(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>Log a primeval event.</summary>
            <remarks>
                <para>
                    Information on Primeval Logs (what they are, where/why they are used, etc.)<br />
                </para>
            </remarks>
        </member>
        <member name="T:Outpost31.Core.ScriptParameter">
            <summary>Parse the Script Parameter components passed from Avatar.</summary>
        </member>
        <member name="P:Outpost31.Core.ScriptParameter.ExeAsm">
            <summary>The executing Assembly name.</summary>
            <remarks>A required component for writing log files, defined here so it can be used throughout the class.</remarks>
        </member>
        <member name="M:Outpost31.Core.ScriptParameter.ParseSent(Outpost31.Core.Session.TingenSession)">
            <summary>Parses the original Script Parameter sent from Avatar.</summary>
            <param name="tnSession">The TingenSession object for this session.</param>
            <!-- Failed to insert some or all of included XML --><include file="XmlDoc/Outpost31.Core_doc.xml" path="Outpost31/Cs[@name=&quot;ScriptParameter&quot;]/ParseSent/*" />
        </member>
        <member name="M:Outpost31.Core.ScriptParameter.ParseAdminModule(Outpost31.Core.Session.TingenSession)">
            <summary>test</summary>
            <param name="tnSession"></param>
        </member>
        <member name="T:Outpost31.Core.Configuration.ConfigSettings">
            <summary>The Tingen configuration settings.</summary>
            <remarks>
                <para>
                    Tingen configuration settings are always stored in <c>TingenData\%SystemCode%\Config\Tingen.config</c> and:
                    <list type="bullet">
                        <item>Define the <i>core functionality</i> of the Tingen web service.</item>
                        <item>Do not contain configuration settings for Tingen Modules (aside from a Module's Mode)</item>
                        <item>Do not change between Tingen sessions</item>
                        <item>Can be modified by the end user to suit their environment</item>
                        <item>Modifications to configuration settings will be applied when the file is saved.</item>
                    </list>
                </para>
                <para>
                    While a Module's Mode settings is stored in the Tingen configuration file, the rest of the Module's configuration settings are stored in that Module's configuration file.<br />
                </para>
            </remarks><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation">Tingen documentation</seealso>
        </member>
        <member name="P:Outpost31.Core.Configuration.ConfigSettings.Outpost31Version">
            <summary>DOCUMENTATION NEEDED</summary>
        </member>
        <member name="P:Outpost31.Core.Configuration.ConfigSettings.TingenMode">
            <summary>Determines the available Tingen web service functionality.</summary>
            <remarks>
                <para>
                    The following modes are available to Tingen and its individual Modules:
                    <list type="table">
                        <listheader>
                            <term>Mode</term>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>Enabled</term>
                            <description>Functionality is enabled.</description>
                        </item>
                        <item>
                            <term>Disabled</term>
                            <description>Functionality is disabled.</description>
                        </item>
                        <item>
                            <term>Passthrough</term>
                            <description>Functionality is enabled, but no changes are made (and log files are written).</description>
                        </item>
                    </list>
                </para>
                <para>
                    Please note:
                    <list type="bullet">
                        <item>Individual modules may have additional modes, which are documented in the module's documentation.</item>
                        <item>Disabling the Tingen web service will disable <i>all functionality</i>, including <i>all Module functionality</i>.
                        </item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Configuration.ConfigSettings.ModOpenIncidentMode">
            <summary>Determines the available Open Incident Module functionality.</summary>
            <remarks>
                <para>
                    The following modes are available to Tingen and its individual Modules:
                    <list type="table">
                        <listheader>
                            <term>Mode</term>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>Enabled</term>
                            <description>Functionality is enabled.</description>
                        </item>
                        <item>
                            <term>Disabled</term>
                            <description>Functionality is disabled.</description>
                        </item>
                        <item>
                            <term>Passthrough</term>
                            <description>Functionality is enabled, but no changes are made (and log files are written).</description>
                        </item>
                    </list>
                </para>
                <para>
                    Please note:
                    <list type="bullet">
                        <item>Individual modules may have additional modes, which are documented in the module's documentation.</item>
                        <item>Disabling the Tingen web service will disable <i>all functionality</i>, including <i>all Module functionality</i>.
                        </item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Configuration.ConfigSettings.NtstWebServicesMode">
            <summary>Determines the available Netsmart web service functionality.</summary>
            <remarks>
                <para>
                    This functionality is not implemented (yet).
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Configuration.ConfigSettings.TraceLevel">
            <summary>Determines the session Trace Log level.</summary>
            <remarks>
                <para>
                    Determines the amount of <b>Trace Logs</b> that are generated.
                </para>
                <para>
                    The Trace Level can be be between <c>0</c> (disabled) and <c>9</c> (all Trace Logs are written).
                </para>
                <para>
                    Trace log levels are cumulative, meaning that a level <c>3</c> trace log will also write level <c>2</c> and level <c>1</c> trace logs.
                </para>
            </remarks><value>
                If you aren't having any issues, you can set this to <c>0</c>, but keep in mind that the higher the number, the greater affect creating Trace Logs will have on performance.
            </value><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation/blob/main/Static/Logging.md">Tingen Documentation: Logging</seealso>
        </member>
        <member name="P:Outpost31.Core.Configuration.ConfigSettings.TraceDelay">
            <summary>Determines the Trace Log delay.</summary>
            <remarks>
                <para>
                    Determines the delay, in milliseconds, between <b>Trace Log</b> writes.
                </para>
                <para>
                    Since Trace Logs may be written <i>extremely fast</i>, the <c>TraceDelay</c> setting can beused to slow down the log writing process, ensuring all logs are written.
                </para>
            </remarks><value>
                The default is <c>10</c>. Increasing this value is not recommended, since it can have an adverse affect on performance.
            </value><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation/blob/main/Static/Logging.md">Tingen Documentation: Logging</seealso>
        </member>
        <member name="M:Outpost31.Core.Configuration.ConfigSettings.BuildDefaultObject">
            <summary>Build a default Tingen configuration object.</summary>
            <returns>An data structure with default Tingen configuration values.</returns>
            <remarks>
                <para>
                    Default values for the Tingen configuration settings:<br />
                    <list type="table">
                        <listheader>
                            <term>Setting</term>
                            <description>Value</description>
                        </listheader>
                        <item>
                            <term>TingenMode</term>
                            <description>enabled</description>
                        </item>
                        <item>
                            <term>ModOpenIncidentMode</term>
                            <description>enabled</description>
                        </item>
                        <item>
                            <term>NtstWebServicesMode</term>
                            <description>disabled</description>
                        </item>
                        <item>
                            <term>TraceLevel</term>
                            <description>1</description>
                        </item>
                        <item>
                            <term>TraceDelay</term>
                            <description>10</description>
                        </item>
                    </list>
                </para>
                <para>
                    When a new version of Tingen is released, these need to be verified/updated.
                    <br />
                    Builds the default Tingen configuration settings, usually because a configuration file doesn't exist.
                </para>
            </remarks>
        </member>
        <member name="M:Outpost31.Core.Configuration.ConfigSettings.Load(System.String,System.String)">
            <summary>Load the Tingen configuration file.</summary>
            <param name="configPath">Path to the Tingen configuration file.</param>
            <returns>The necessary AvatarNX data.</returns>
            <remarks>
                <para>
                    The configuration file path is hard-coded, and set in <see cref="M:Outpost31.Core.Session.TingenSession.Build(ScriptLinkStandard.Objects.OptionObject2015,System.String,System.String)" /> when the <b>Tingen Session</b> is initialized.<br />
                    <br />
                    If the configuration file does not exist, a configuration file with default values will be created.
                </para>
            </remarks>
        </member>
        <member name="T:Outpost31.Core.Session.Catalog">
            <summary>TBD</summary>
        </member>
        <member name="P:Outpost31.Core.Session.Catalog.ExeAsm">
            <summary>The executing Assembly name.</summary>
            <remarks>A required component for writing log files, defined here so it can be used throughout the class.</remarks>
        </member>
        <member name="M:Outpost31.Core.Session.Catalog.CurrentSettings(Outpost31.Core.Session.TingenSession)">
            <summary>TBD</summary>
            <param name="tnSession"></param>
            <returns></returns>
        </member>
        <member name="M:Outpost31.Core.Session.Catalog.SessionDetails(Outpost31.Core.Session.TingenSession)">
            <summary>TBD</summary>
            <param name="tnSession"></param>
            <returns></returns>
        </member>
        <member name="T:Outpost31.Core.Session.TingenSession">
            <summary>Contains Tingen session logic.</summary>
            <remarks>
             <para>
              Properties for the Tingen session are located in <b>TingenSession.Properties.cs.</b>
             </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Session.TingenSession.TnVersion">
            <summary>The Tingen version.</summary>
            <!-- No matching elements were found for the following include tag --><include file="XmlDoc/Outpost31-Common_doc.xml" path="Outpost31-Common/Type[@name=&quot;TingenInfo&quot;]/TingenVersion/*" />
        </member>
        <member name="P:Outpost31.Core.Session.TingenSession.TnBuild">
            <summary>The Tingen build.</summary>
            <!-- No matching elements were found for the following include tag --><include file="XmlDoc/Outpost31-Common_doc.xml" path="Outpost31-Common/Type[@name=&quot;TingenInfo&quot;]/TingenBuild/*" />
        </member>
        <member name="P:Outpost31.Core.Session.TingenSession.Date">
            <summary>The session datestamp.</summary>
            <remarks>
                <para>
                   Session date
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Session.TingenSession.Time">
            <summary>The session timestamp.</summary>
            <remarks>
                <para>
                    Session Time
                </para>
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Session.TingenSession.ReturnClonedOptionObject">
            <summary>Return the cloned OptionObject.</summary>
            <remarks>Do we return the cloned object?</remarks>
            <returns>True/False.</returns>
        </member>
        <member name="P:Outpost31.Core.Session.TingenSession.TnConfig">
            <summary>Config</summary>
            <!-- No matching elements were found for the following include tag --><include file="XmlDoc/Outpost31-Common_doc.xml" path="Outpost31-Common/Type[@name=&quot;TingenInfo&quot;]/TingenConfig/*" />
        </member>
        <member name="P:Outpost31.Core.Session.TingenSession.TnPath">
            <summary>Tingen Framework information.</summary>
            <remarks>NEED XML Build path stuff?</remarks>
            <returns>Paths stuff</returns>
        </member>
        <member name="P:Outpost31.Core.Session.TingenSession.AvData">
            <summary>Avatar components .</summary>
            <remarks>NEED XML Avatar data</remarks>
            <returns>Avatar data</returns>
        </member>
        <member name="P:Outpost31.Core.Session.TingenSession.NtstWebServiceSecurity">
            <summary>Not used.</summary>
            <remarks>Not used.</remarks>
            <returns>Netsmart web service security information.</returns>
        </member>
        <member name="P:Outpost31.Core.Session.TingenSession.TraceInfo">
            <summary>Trace log information.</summary>
            <remarks>NEED XML Trace log information.</remarks>
        </member>
        <member name="P:Outpost31.Core.Session.TingenSession.ModOpenIncident">
            <summary>Module to open an incident.</summary>
            <remarks>NEED XML</remarks>
            <returns>What it returns</returns>
        </member>
        <member name="M:Outpost31.Core.Session.TingenSession.Build(ScriptLinkStandard.Objects.OptionObject2015,System.String,System.String)">
            <summary>Builds the Tingen Session object.</summary>
            <param name="configFile">The path to the Tingen configuration file.</param>
            <param name="sentOptionObject">The OptionObject sent from Avatar.</param>
            <param name="sentScriptParameter">The ScriptParameter sent from Avatar.</param>
            <returns>An Tingen Session object.</returns>
            <remarks>
                <para>
                    The Tingen Session contains all of the information that Tingen needs to do what it does, including:
                    <list type="bullet">
                        <item>Configuration settings (user-definable settings from the <paramref name="configFile" />) </item>
                        <item>Static settings (these do not change between sessions)</item>
                        <item>Runtime settings (unique to the current session)</item>
                        <item>Data sent from Avatar, including the <paramref name="sentOptionObject" /> and <paramref name="sentScriptParameter" /></item>
                        <item>Data derived from the <paramref name="sentOptionObject" /> or <paramref name="sentScriptParameter" />.</item>
                        <item>Required Tingen Module details.</item>
                    </list>
                </para>
                <para>
                    <b>More information about this method:</b><br />
                    This method is one of the most important in Tingen, as it builds the Tingen Session object.<br /><br />
                    The Session object is built in this order:
                    <list type="number">
                        <item>A basic TingenSession object is initalized with the current date, time, configuration settings, and Avatar data.</item>
                        <item>Framework information is added seperately.</item>
                        <item>Trace log information is added seperately.</item>
                        <item>Module objects are added seperately.</item>
                    </list>
                </para>
            </remarks><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation/blob/main/Static/Script-Parameter.md">Tingen Documentation: The Script Parameter</seealso><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation/blob/main/Static/OptionObject.md">Tingen Documentation: The OptionObject</seealso>
        </member>
        <member name="M:Outpost31.Core.Session.TingenSession.Initialize(Outpost31.Core.Session.TingenSession)">
            <summary>Soon.</summary>
            <param name="tnSession"></param>
        </member>
        <member name="M:Outpost31.Core.Session.TingenSession.WriteSessionDetails(Outpost31.Core.Session.TingenSession)">
            <summary>TBD</summary>
        </member>
        <member name="M:Outpost31.Core.Session.TingenSession.BuildStaticVars">
            <summary>TBD</summary>
        </member>
        <member name="T:Outpost31.Core.Utilities.DuFile">
            <summary>Does things with files.</summary>
        </member>
        <member name="M:Outpost31.Core.Utilities.DuFile.WriteLocal(System.String,System.String)">
            <summary>Writes text to a file.</summary>
        </member>
        <member name="T:Outpost31.Core.Utilities.DuJson">
            <summary>Provides JSON functionality.</summary>
            <!-- No matching elements were found for the following include tag --><include file="XmlDoc/Outpost31.Core.Utilities_doc.xml" path="Outpost31.Core.Utilities/Cs[@name=&quot;DuJson&quot;]/DuJSon/*" />
        </member>
        <member name="M:Outpost31.Core.Utilities.DuJson.ExportToLocalFile``1(``0,System.String,System.Boolean)">
            <summary>Export JSON data to an external file.</summary>
            <typeparam name="JsonObject">The JSON object type.</typeparam>
            <param name="jsonObject">The JSON object.</param>
            <param name="filePath">The export file path.</param>
            <param name="formatJson">Determines if the JSON data is formatted.</param>
            <remarks>
                <para>
                    These are some remarks
                </para>
            </remarks><example>
                To call DuJson.ExportToLocalFile():
                <code>
                    TheObject theObject = new TheObject().;
                    DuJson.ExportToLocalFile&lt;TheObject&gt;(theObject, "/Path/To/Export/File");
                </code>
            </example>
        </member>
        <member name="M:Outpost31.Core.Utilities.DuJson.ConvertToString``1(``0)">
            <summary>Convert a JSON object to a string[].</summary>
            <typeparam name="JsonObject">The JSON object type.</typeparam>
            <param name="jsonObject">The JSON object.</param>
            <returns>A JSON object as a string[].</returns>
        </member>
        <member name="M:Outpost31.Core.Utilities.DuJson.ImportFromLocalFile``1(System.String)">
            <summary>Import JSON data from an external file.</summary>
            <typeparam name="JsonObject">The JSON object type.</typeparam>
            <param name="filePath">The import file path.</param>
            <returns>The contents of the file as a JSON object.</returns>
            <remarks>
                <para>
                    These are some remarks
                </para>
            </remarks><example>
                To call DuJson.ImportToLocalFile():
                <code>
                    TheObject theObject = DuJson.ImportFromLocalFile&lt;TheObject&gt;("/Path/To/Import/File");
                </code>
            </example>
        </member>
        <member name="T:Outpost31.Module.Admin.Export.OptionObject">
            <summary>TBD</summary>
        </member>
        <member name="M:Outpost31.Module.Admin.Export.OptionObject.ToLocalFile">
            <summary>TBD</summary>
        </member>
        <member name="T:Outpost31.Module.Admin.Framework.Refresh">
            <summary>TBD</summary>
        </member>
        <member name="T:Outpost31.Module.Admin.Service.Status">
            <summary>TBD</summary>
        </member>
        <member name="P:Outpost31.Module.Admin.Service.Status.ExeAsm">
            <summary>The executing Assembly name.</summary>
            <remarks>A required component for writing log files, defined here so it can be used throughout the class.</remarks>
        </member>
        <member name="M:Outpost31.Module.Admin.Service.Status.UpdateAll(Outpost31.Core.Session.TingenSession)">
            <summary>TBD</summary>
        </member>
        <member name="M:Outpost31.Module.Admin.Service.Status.UpdateMode(System.String,System.String,System.String,Outpost31.Core.Logger.TraceLog)">
            <summary>TBD</summary>
        </member>
        <member name="M:Outpost31.Module.Admin.Service.Status.UpdateSettings(Outpost31.Core.Session.TingenSession)">
            <summary>TBD</summary>
        </member>
        <member name="T:Outpost31.Module.Common.Action.Field">
            <summary>Field operations.</summary>
        </member>
        <member name="P:Outpost31.Module.Common.Action.Field.ExeAsm">
            <summary>The executing Assembly name.</summary>
            <remarks>A required component for writing log files, defined here so it can be used throughout the class.</remarks>
        </member>
        <member name="M:Outpost31.Module.Common.Action.Field.CompareValue(System.String,System.String,Outpost31.Core.Logger.TraceLog)">
            <summary>Compare the values of two form field IDs to determine if they are the same.</summary>
            <param name="field01Value">The value of the first field.</param>
            <param name="field02Value">The value of the second field.</param>
            <remarks>
             <example>
              To call FieldOperation.Compare():
              <code>
               var value1 = tnSession.AvComponents.SentOptionObject.GetFieldValue("10001")
               var value2 = tnSession.AvComponents.SentOptionObject.GetFieldValue("10002");
               Outpost31.Module.Common.FieldOperation.SaveValue(value1, value1);
              </code>
             </example>
            </remarks>
            <returns>True (the fields values are the same) or false(the field values are different).</returns>
        </member>
        <member name="M:Outpost31.Module.Common.Action.Field.Lock(System.String)">
            <summary>Locks a field so that it cannot be edited.</summary>
            <param name="fieldId">The field ID to be locked.</param>
        </member>
        <member name="M:Outpost31.Module.Common.Action.Field.SaveValue(System.String,System.String,Outpost31.Core.Logger.TraceLog)">
            <summary>Saves the value of a field to a file.</summary>
            <param name="valueToSave">The value to save.</param>
            <param name="filePath">The file path.</param>
            <remarks>
             <para>
              <example>
               To call FieldOperation.Compare():
               <code>
                var fieldValue = tnSession.AvComponents.SentOptionObject.GetFieldValue("10001")
                var filePath = $@"{tnSession.TnFramework.TemporaryPath}\{currentAvatarUser}-%filename%.%extension%";
                Outpost31.Module.Common.FieldOperation.SaveValue(originalAuthor, filePath);
               </code>
              </example>
             </para>
             <para>
              To ensure that any sensitive data is removed at the end of a session, the filePath should adhere to the following standards:
              <list type="bullet">
               <item>The filename should always start with the <c>currentAvatarUser</c></item>
               <item>The <c>filePath</c> should be in <c>tnSession.TnFramework.TemporaryPath</c></item>
              </list>
             </para>
             <para>
              Since the <c>filePath</c> is user-definable, we will verify that the <c>filePath</c> doesn't exist before (re)creating it.
             </para>
            </remarks>
        </member>
        <member name="T:Outpost31.Module.OpenIncident.ModuleOpenIncident">
            <summary>TBD</summary>
        </member>
        <member name="P:Outpost31.Module.OpenIncident.ModuleOpenIncident.ExeAsm">
            <summary>The executing Assembly name.</summary>
            <remarks>A required component for writing log files, defined here so it can be used throughout the class.</remarks>
        </member>
        <member name="P:Outpost31.Module.OpenIncident.ModuleOpenIncident.Whitelist">
            <summary>TBD</summary>
        </member>
        <member name="P:Outpost31.Module.OpenIncident.ModuleOpenIncident.Blacklist">
            <summary>TBD</summary>
        </member>
        <member name="P:Outpost31.Module.OpenIncident.ModuleOpenIncident.OriginalFullName">
            <summary>TBD</summary>
        </member>
        <member name="P:Outpost31.Module.OpenIncident.ModuleOpenIncident.CurrentFullName">
            <summary>TBD</summary>
        </member>
        <member name="P:Outpost31.Module.OpenIncident.ModuleOpenIncident.PersonCompletingIncidentFormFieldId">
            <summary>TBD</summary>
        </member>
        <member name="P:Outpost31.Module.OpenIncident.ModuleOpenIncident.FormOpenMessage">
            <summary>TBD</summary>
        </member>
        <member name="P:Outpost31.Module.OpenIncident.ModuleOpenIncident.FormOpenErrorCode">
            <summary>TBD</summary>
        </member>
        <member name="P:Outpost31.Module.OpenIncident.ModuleOpenIncident.FormSubmitMessage">
            <summary>TBD</summary>
        </member>
        <member name="P:Outpost31.Module.OpenIncident.ModuleOpenIncident.FormSubmitErrorCode">
            <summary>TBD</summary>
        </member>
        <member name="M:Outpost31.Module.OpenIncident.ModuleOpenIncident.BuildDefaultModOpenIncident(Outpost31.Core.Logger.TraceLog)">
            <summary>TBD</summary>
        </member>
        <member name="M:Outpost31.Module.OpenIncident.ModuleOpenIncident.Load(System.String,System.String,ScriptLinkStandard.Objects.OptionObject2015,Outpost31.Core.Logger.TraceLog)">
            <summary>TBD</summary>
        </member>
        <member name="M:Outpost31.Module.OpenIncident.ModuleOpenIncident.GetFullName(System.String,System.String,Outpost31.Core.Logger.TraceLog)">
            <summary>TBD</summary>
        </member>
        <member name="M:Outpost31.Module.OpenIncident.ModuleOpenIncident.GetAuthorInformation(Outpost31.Core.Session.TingenSession)">
            <summary>TBD</summary>
        </member>
        <member name="T:Outpost31.Module.OpenIncident.Verify">
            <summary>VerifyAuthor command.</summary>
        </member>
        <member name="P:Outpost31.Module.OpenIncident.Verify.ExeAsm">
            <summary>The executing Assembly name.</summary>
            <remarks>A required component for writing log files, defined here so it can be used throughout the class.</remarks>
        </member>
        <member name="M:Outpost31.Module.OpenIncident.Verify.OriginalAuthorIsOpening(Outpost31.Core.Session.TingenSession)">
            <summary>TBD</summary>
        </member>
        <member name="M:Outpost31.Module.OpenIncident.Verify.OriginalAuthorIsSubmitting(Outpost31.Core.Session.TingenSession)">
            <summary>Verify the Avatar user is the same as the original author.</summary>
            <param name="tnSession"></param>
        </member>
        <member name="T:Outpost31.WelcomeToOutpost31">
            <summary>A place for Outpost31 details and stuff.</summary>
            <remarks>
                <para>
                    Outpost31 is the back-end logic for the Tingen web service.<br />
                    <br />
                    This class is just a placeholder for documentation, and where the Outpost31 version number is<br />
                    updated (see the header above).<br />
                    <br />
                    While you're here, take a look at this stuff:
                    <list type="bullet">
                        <item>The <see href="https://github.com/spectrum-health-systems/Tingen-Documentation">Tingen Documentation</see></item>
                    </list>
                    Uh...I guess that's it. Thanks for stopping by!
                </para>
            </remarks><seealso href="https://github.com/spectrum-health-systems/Tingen-Documentation">Tingen documentation</seealso>
        </member>
    </members>
</doc>
