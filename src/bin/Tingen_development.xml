<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tingen_development</name>
    </assembly>
    <members>
        <member name="T:Tingen_development.DocumentationTesting.ExampleClass">
             <summary>
             Every class and member should have a one sentence
             summary describing its purpose.
             </summary>
             <remarks>
             You can expand on that one sentence summary to
             provide more information for readers. In this case,
             the <c>ExampleClass</c> provides different C#
             elements to show how you would add documentation
            comments for most elements in a typical class.
             <para>
             The remarks can add multiple paragraphs, so you can
             write detailed information for developers that use
             your work. You should add everything needed for
             readers to be successful. This class contains
             examples for the following:
             </para>
             <list type="table">
             <item>
             <term>Summary</term>
             <description>
             This should provide a one sentence summary of the class or member.
             </description>
             </item>
             <item>
             <term>Remarks</term>
             <description>
             This is typically a more detailed description of the class or member
             </description>
             </item>
             <item>
             <term>para</term>
             <description>
             The para tag separates a section into multiple paragraphs
             </description>
             </item>
             <item>
             <term>list</term>
             <description>
             Provides a list of terms or elements
             </description>
             </item>
             <item>
             <term>returns, param</term>
             <description>
             Used to describe parameters and return values
             </description>
             </item>
             <item>
             <term>value</term>
             <description>Used to describe properties</description>
             </item>
             <item>
             <term>exception</term>
             <description>
             Used to describe exceptions that may be thrown
             </description>
             </item>
             <item>
             <term>c, cref, see, seealso</term>
             <description>
             These provide code style and links to other
             documentation elements
             </description>
             </item>
             <item>
             <term>example, code</term>
             <description>
             These are used for code examples
             </description>
             </item>
             </list>
             <para>
             The list above uses the "table" style. You could
             also use the "bullet" or "number" style. Neither
             would typically use the "term" element.
             <br/>
             Note: paragraphs are double spaced. Use the *br*
             tag for single spaced lines.
             </para>
             </remarks>
        </member>
        <member name="P:Tingen_development.DocumentationTesting.ExampleClass.Label">
            <value>
            The <c>Label</c> property represents a label
            for this instance.
            </value>
            <remarks>
            The <see cref="P:Tingen_development.DocumentationTesting.ExampleClass.Label"/> is a <see langword="string"/>
            that you use for a label.
            <para>
            Note that there isn't a way to provide a "cref" to
            each accessor, only to the property itself.
            </para>
            </remarks>
        </member>
        <member name="M:Tingen_development.DocumentationTesting.ExampleClass.Add(System.Int32,System.Int32)">
            <summary>
            Adds two integers and returns the result.
            </summary>
            <returns>
            The sum of two integers.
            </returns>
            <param name="left">
            The left operand of the addition.
            </param>
            <param name="right">
            The right operand of the addition.
            </param>
            <example>
            <code>
            int c = Math.Add(4, 5);
            if (c > 10)
            {
                Console.WriteLine(c);
            }
            </code>
            </example>
            <exception cref="T:System.OverflowException">
            Thrown when one parameter is
            <see cref="F:System.Int32.MaxValue">MaxValue</see> and the other is
            greater than 0.
            Note that here you can also use
            <see href="https://learn.microsoft.com/dotnet/api/system.int32.maxvalue"/>
             to point a web page instead.
            </exception>
            <see cref="T:Tingen_development.DocumentationTesting.ExampleClass"/> for a list of all
            the tags in these examples.
            <seealso cref="P:Tingen_development.DocumentationTesting.ExampleClass.Label"/>
        </member>
        <member name="T:Tingen_development.MainClass">
            <summary>
            A summary about this class.
            </summary>
            <remarks>
            These remarks would explain more about this class.
            In this example, these comments also explain the
            general information about the derived class.
            </remarks>
        </member>
        <member name="T:Tingen_development.DerivedClass">
            <inheritdoc/>
        </member>
        <member name="T:Tingen_development.ITestInterface">
            <summary>
            This interface would describe all the methods in
            its contract.
            </summary>
            <remarks>
            While elided for brevity, each method or property
            in this interface would contain docs that you want
            to duplicate in each implementing class.
            </remarks>
        </member>
        <member name="M:Tingen_development.ITestInterface.Method(System.Int32)">
            <summary>
            This method is part of the test interface.
            </summary>
            <remarks>
            This content would be inherited by classes
            that implement this interface when the
            implementing class uses "inheritdoc"
            </remarks>
            <returns>The value of <paramref name="arg" /> </returns>
            <param name="arg">The argument to the method</param>
        </member>
        <member name="T:Tingen_development.ImplementingClass">
            <inheritdoc cref="T:Tingen_development.ITestInterface"/>
        </member>
        <member name="T:Tingen_development.InheritOnlyReturns">
            <summary>
            This class shows hows you can "inherit" the doc
            comments from one method in another method.
            </summary>
            <remarks>
            You can inherit all comments, or only a specific tag,
            represented by an xpath expression.
            </remarks>
        </member>
        <member name="M:Tingen_development.InheritOnlyReturns.MyParentMethod(System.Boolean)">
            <summary>
            In this example, this summary is only visible for this method.
            </summary>
            <returns>A boolean</returns>
        </member>
        <member name="M:Tingen_development.InheritOnlyReturns.MyChildMethod">
            <inheritdoc cref="M:Tingen_development.InheritOnlyReturns.MyParentMethod(System.Boolean)" path="/returns"/>
        </member>
        <member name="T:Tingen_development.InheritAllButRemarks">
            <Summary>
            This class shows an example ofsharing comments across methods.
            </Summary>
        </member>
        <member name="M:Tingen_development.InheritAllButRemarks.MyParentMethod(System.Boolean)">
            <summary>
            In this example, this summary is visible on all the methods.
            </summary>
            <remarks>
            The remarks can be inherited by other methods
            using the xpath expression.
            </remarks>
            <returns>A boolean</returns>
        </member>
        <member name="M:Tingen_development.InheritAllButRemarks.MyChildMethod">
            <inheritdoc cref="M:Tingen_development.InheritAllButRemarks.MyParentMethod(System.Boolean)" path="//*[not(self::remarks)]"/>
        </member>
        <member name="T:Tingen_development.GenericClass`1">
            <summary>
            This is a generic class.
            </summary>
            <remarks>
            This example shows how to specify the <see cref="T:Tingen_development.GenericClass`1"/>
            type as a cref attribute.
            In generic classes and methods, you'll often want to reference the
            generic type, or the type parameter.
            </remarks>
        </member>
        <member name="T:Tingen_development.ParamsAndParamRefs">
            <Summary>
            This shows examples of typeparamref and typeparam tags
            </Summary>
        </member>
        <member name="M:Tingen_development.ParamsAndParamRefs.GetGenericValue``1(``0)">
            <summary>
            The GetGenericValue method.
            </summary>
            <remarks>
            This sample shows how to specify the <see cref="M:Tingen_development.ParamsAndParamRefs.GetGenericValue``1(``0)"/>
            method as a cref attribute.
            The parameter and return value are both of an arbitrary type,
            <typeparamref name="T"/>
            </remarks>
        </member>
        <member name="T:Tingen_development.TaggedLibrary.Math">
            <summary>
            The main <c>Math</c> class.
            Contains all methods for performing basic math functions.
            <list type="bullet">
            <item>
            <term>Add</term>
            <description>Addition Operation</description>
            </item>
            <item>
            <term>Subtract</term>
            <description>Subtraction Operation</description>
            </item>
            <item>
            <term>Multiply</term>
            <description>Multiplication Operation</description>
            </item>
            <item>
            <term>Divide</term>
            <description>Division Operation</description>
            </item>
            </list>
            </summary>
            <remarks>
            <para>
            This class can add, subtract, multiply and divide.
            </para>
            <para>
            These operations can be performed on both
            integers and doubles.
            </para>
            </remarks>
        </member>
        <member name="M:Tingen_development.TaggedLibrary.Math.Add(System.Int32,System.Int32)">
            <summary>
            Adds two integers <paramref name="a"/> and <paramref name="b"/>
             and returns the result.
            </summary>
            <returns>
            The sum of two integers.
            </returns>
            <example>
            <code>
            int c = Math.Add(4, 5);
            if (c > 10)
            {
                Console.WriteLine(c);
            }
            </code>
            </example>
            <exception cref="T:System.OverflowException">
            Thrown when one parameter is <see cref="F:System.Int32.MaxValue"/> and the other
            is greater than 0.
            </exception>
            See <see cref="M:Tingen_development.TaggedLibrary.Math.Add(System.Double,System.Double)"/> to add doubles.
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Subtract(System.Int32,System.Int32)"/>
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Multiply(System.Int32,System.Int32)"/>
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Divide(System.Int32,System.Int32)"/>
            <param name="a">An integer.</param>
            <param name="b">An integer.</param>
        </member>
        <member name="M:Tingen_development.TaggedLibrary.Math.Add(System.Double,System.Double)">
            <summary>
            Adds two doubles <paramref name="a"/> and <paramref name="b"/>
            and returns the result.
            </summary>
            <returns>
            The sum of two doubles.
            </returns>
            <example>
            <code>
            double c = Math.Add(4.5, 5.4);
            if (c > 10)
            {
                Console.WriteLine(c);
            }
            </code>
            </example>
            <exception cref="T:System.OverflowException">
            Thrown when one parameter is max and the other
            is greater than 0.</exception>
            See <see cref="M:Tingen_development.TaggedLibrary.Math.Add(System.Int32,System.Int32)"/> to add integers.
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Subtract(System.Double,System.Double)"/>
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Multiply(System.Double,System.Double)"/>
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Divide(System.Double,System.Double)"/>
            <param name="a">A double precision number.</param>
            <param name="b">A double precision number.</param>
        </member>
        <member name="M:Tingen_development.TaggedLibrary.Math.Subtract(System.Int32,System.Int32)">
            <summary>
            Subtracts <paramref name="b"/> from <paramref name="a"/>
            and returns the result.
            </summary>
            <returns>
            The difference between two integers.
            </returns>
            <example>
            <code>
            int c = Math.Subtract(4, 5);
            if (c > 1)
            {
                Console.WriteLine(c);
            }
            </code>
            </example>
            See <see cref="M:Tingen_development.TaggedLibrary.Math.Subtract(System.Double,System.Double)"/> to subtract doubles.
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Add(System.Int32,System.Int32)"/>
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Multiply(System.Int32,System.Int32)"/>
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Divide(System.Int32,System.Int32)"/>
            <param name="a">An integer.</param>
            <param name="b">An integer.</param>
        </member>
        <member name="M:Tingen_development.TaggedLibrary.Math.Subtract(System.Double,System.Double)">
            <summary>
            Subtracts a double <paramref name="b"/> from another 
            double <paramref name="a"/> and returns the result.
            </summary>
            <returns>
            The difference between two doubles.
            </returns>
            <example>
            <code>
            double c = Math.Subtract(4.5, 5.4);
            if (c > 1)
            {
                Console.WriteLine(c);
            }
            </code>
            </example>
            See <see cref="M:Tingen_development.TaggedLibrary.Math.Subtract(System.Int32,System.Int32)"/> to subtract integers.
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Add(System.Double,System.Double)"/>
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Multiply(System.Double,System.Double)"/>
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Divide(System.Double,System.Double)"/>
            <param name="a">A double precision number.</param>
            <param name="b">A double precision number.</param>
        </member>
        <member name="M:Tingen_development.TaggedLibrary.Math.Multiply(System.Int32,System.Int32)">
            <summary>
            Multiplies two integers <paramref name="a"/> 
            and <paramref name="b"/> and returns the result.
            </summary>
            <returns>
            The product of two integers.
            </returns>
            <example>
            <code>
            int c = Math.Multiply(4, 5);
            if (c > 100)
            {
                Console.WriteLine(c);
            }
            </code>
            </example>
            See <see cref="M:Tingen_development.TaggedLibrary.Math.Multiply(System.Double,System.Double)"/> to multiply doubles.
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Add(System.Int32,System.Int32)"/>
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Subtract(System.Int32,System.Int32)"/>
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Divide(System.Int32,System.Int32)"/>
            <param name="a">An integer.</param>
            <param name="b">An integer.</param>
        </member>
        <member name="M:Tingen_development.TaggedLibrary.Math.Multiply(System.Double,System.Double)">
            <summary>
            Multiplies two doubles <paramref name="a"/> and
            <paramref name="b"/> and returns the result.
            </summary>
            <returns>
            The product of two doubles.
            </returns>
            <example>
            <code>
            double c = Math.Multiply(4.5, 5.4);
            if (c > 100.0)
            {
                Console.WriteLine(c);
            }
            </code>
            </example>
            See <see cref="M:Tingen_development.TaggedLibrary.Math.Multiply(System.Int32,System.Int32)"/> to multiply integers.
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Add(System.Double,System.Double)"/>
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Subtract(System.Double,System.Double)"/>
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Divide(System.Double,System.Double)"/>
            <param name="a">A double precision number.</param>
            <param name="b">A double precision number.</param>
        </member>
        <member name="M:Tingen_development.TaggedLibrary.Math.Divide(System.Int32,System.Int32)">
            <summary>
            Divides an integer <paramref name="a"/> by another
            integer <paramref name="b"/> and returns the result.
            </summary>
            <returns>
            The quotient of two integers.
            </returns>
            <example>
            <code>
            int c = Math.Divide(4, 5);
            if (c > 1)
            {
                Console.WriteLine(c);
            }
            </code>
            </example>
            <exception cref="T:System.DivideByZeroException">
            Thrown when <paramref name="b"/> is equal to 0.
            </exception>
            See <see cref="M:Tingen_development.TaggedLibrary.Math.Divide(System.Double,System.Double)"/> to divide doubles.
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Add(System.Int32,System.Int32)"/>
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Subtract(System.Int32,System.Int32)"/>
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Multiply(System.Int32,System.Int32)"/>
            <param name="a">An integer dividend.</param>
            <param name="b">An integer divisor.</param>
        </member>
        <member name="M:Tingen_development.TaggedLibrary.Math.Divide(System.Double,System.Double)">
            <summary>
            Divides a double <paramref name="a"/> by another double
            <paramref name="b"/> and returns the result.
            </summary>
            <returns>
            The quotient of two doubles.
            </returns>
            <example>
            <code>
            double c = Math.Divide(4.5, 5.4);
            if (c > 1.0)
            {
                Console.WriteLine(c);
            }
            </code>
            </example>
            <exception cref="T:System.DivideByZeroException">
            Thrown when <paramref name="b"/> is equal to 0.
            </exception>
            See <see cref="M:Tingen_development.TaggedLibrary.Math.Divide(System.Int32,System.Int32)"/> to divide integers.
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Add(System.Double,System.Double)"/>
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Subtract(System.Double,System.Double)"/>
            <seealso cref="M:Tingen_development.TaggedLibrary.Math.Multiply(System.Double,System.Double)"/>
            <param name="a">A double precision dividend.</param>
            <param name="b">A double precision divisor.</param>
        </member>
        <member name="T:Tingen_development.Tingen_development">
            <summary>The entry class for Tingen.</summary>
            <remarks>
             <para>
              - This class is designed to be static, and <i>should not be modified</i>.<br/>
              - The heavy lifting is done in the <see href="github.com/spectrum-health-systems/Tingen-Documentation/blob/main/Glossary.md#Outpost31">Outpost31</see> project.
             </para>
            </remarks>
        </member>
        <member name="P:Tingen_development.Tingen_development.AssemblyName">
            <summary>Assembly name for log files.</summary>
            <remarks>
              <para>
               - Define the assembly name here so it can be used to write log files throughout the class.
              </para>
            </remarks>
        </member>
        <member name="P:Tingen_development.Tingen_development.TingenVersion">
            <summary>The current version of Tingen.</summary>
            <remarks>
              <para>
               - Both <see cref="M:Tingen_development.Tingen_development.GetVersion"/> and <see cref="!:RunScript()"/> need the current version number.
              </para>
            </remarks>
        </member>
        <member name="M:Tingen_development.Tingen_development.GetVersion">
            <summary>Returns the current version of Tingen.</summary>
            <remarks>
             <para>
              - Required by Avatar.<br/>
              - <i>Should not be modified</i>.
             </para>
            </remarks>
            <returns>The current version of Tingen.</returns>
        </member>
        <member name="M:Tingen_development.Tingen_development.RunScript(ScriptLinkStandard.Objects.OptionObject2015,System.String)">
            <summary>Starts the Tingen web service</summary>
            <param name="sentOptionObject">The <paramref name="OptionObject"/> sent from Avatar.</param>
            <param name="sentScriptParameter">The <paramref name="Script ParameterParameter"/> sent from Avatar.</param>
            <remarks>
             <para>
              - Required by Avatar.<br/>
              - <i>Should not be modified</i><br/>
              - The majority of work is done in the <see href="github.com/spectrum-health-systems/Tingen-Documentation/blob/main/Glossary.md#Outpost31">Outpost31</see> project.
             </para>
            </remarks>
            <returns>The finalized <paramref name="OptionObject"/> to myAvatar.</returns>
        </member>
    </members>
</doc>
